// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (name, code)
VALUES ($1, $2)
RETURNING id
`

type CreateCountryParams struct {
	Name string
	Code string
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createCountry, arg.Name, arg.Code)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients (name)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateIngredient(ctx context.Context, name string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createIngredient, name)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const createInstruction = `-- name: CreateInstruction :one
INSERT INTO instructions (recipe_id, step_number, instruction_text)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateInstructionParams struct {
	RecipeID        pgtype.UUID
	StepNumber      int32
	InstructionText string
}

func (q *Queries) CreateInstruction(ctx context.Context, arg CreateInstructionParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createInstruction, arg.RecipeID, arg.StepNumber, arg.InstructionText)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (title, servings, servings_type, country_id, source_id, original_url, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at
`

type CreateRecipeParams struct {
	Title        string
	Servings     int32
	ServingsType string
	CountryID    pgtype.UUID
	SourceID     pgtype.UUID
	OriginalUrl  pgtype.Text
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

type CreateRecipeRow struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (CreateRecipeRow, error) {
	row := q.db.QueryRow(ctx, createRecipe,
		arg.Title,
		arg.Servings,
		arg.ServingsType,
		arg.CountryID,
		arg.SourceID,
		arg.OriginalUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateRecipeRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const createRecipeIngredient = `-- name: CreateRecipeIngredient :one
INSERT INTO recipe_ingredients (recipe_id, ingredient_id, amount, unit)
VALUES ($1, $2, $3, $4)
RETURNING recipe_id, ingredient_id
`

type CreateRecipeIngredientParams struct {
	RecipeID     pgtype.UUID
	IngredientID pgtype.UUID
	Amount       pgtype.Numeric
	Unit         pgtype.Text
}

type CreateRecipeIngredientRow struct {
	RecipeID     pgtype.UUID
	IngredientID pgtype.UUID
}

func (q *Queries) CreateRecipeIngredient(ctx context.Context, arg CreateRecipeIngredientParams) (CreateRecipeIngredientRow, error) {
	row := q.db.QueryRow(ctx, createRecipeIngredient,
		arg.RecipeID,
		arg.IngredientID,
		arg.Amount,
		arg.Unit,
	)
	var i CreateRecipeIngredientRow
	err := row.Scan(&i.RecipeID, &i.IngredientID)
	return i, err
}

const createSource = `-- name: CreateSource :one
INSERT INTO sources (name, url)
VALUES ($1, $2)
RETURNING id
`

type CreateSourceParams struct {
	Name string
	Url  string
}

func (q *Queries) CreateSource(ctx context.Context, arg CreateSourceParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createSource, arg.Name, arg.Url)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
